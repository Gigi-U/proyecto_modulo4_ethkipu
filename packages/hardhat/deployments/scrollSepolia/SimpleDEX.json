{
  "address": "0xE2307e3710d108ceC7a4722a020a050681c835b3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAtoB",
          "type": "bool"
        }
      ],
      "name": "TokenSwapped",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountAIn",
          "type": "uint256"
        }
      ],
      "name": "swapAforB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountBIn",
          "type": "uint256"
        }
      ],
      "name": "swapBforA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenA",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenB",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x192f610527b400a905caf8d65eb722af2880962e64e59e450af603f634ba4b10",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xE2307e3710d108ceC7a4722a020a050681c835b3",
    "transactionIndex": 0,
    "gasUsed": "907306",
    "logsBloom": "0x
    "blockHash": "0x84ffd8a54207aa58690a6cd6cfd8b83cddbebac4c6bffbaac2b548a8f087107b",
    "transactionHash": "0x192f610527b400a905caf8d65eb722af2880962e64e59e450af603f634ba4b10",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7561296,
        "transactionHash": "0x192f610527b400a905caf8d65eb722af2880962e64e59e450af603f634ba4b10",
        "address": "0xE2307e3710d108ceC7a4722a020a050681c835b3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x84ffd8a54207aa58690a6cd6cfd8b83cddbebac4c6bffbaac2b548a8f087107b"
      }
    ],
    "blockNumber": 7561296,
    "cumulativeGasUsed": "907306",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaE2abbDE6c9829141675fA0A629a675badbb0d9F",
    "0x8B342f4Ddcc71Af65e4D2dA9CD00cc0E945cFD12"
  ],
  "numDeployments": 1,
  "solcInputHash": "e914d30004f4b95c608b2dbbd103b3d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAtoB\",\"type\":\"bool\"}],\"name\":\"TokenSwapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAIn\",\"type\":\"uint256\"}],\"name\":\"swapAforB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBIn\",\"type\":\"uint256\"}],\"name\":\"swapBforA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleDEX.sol\":\"SimpleDEX\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/SimpleDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\r\\n\\r\\npragma solidity >=0.8.26;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract SimpleDEX is Ownable {\\r\\n    // Instancias de los contratos ERC-20 TokenA y TokenB que se utilizar\\u00e1n para realizar los intercambios\\r\\n    IERC20 public tokenA;\\r\\n    IERC20 public tokenB;\\r\\n\\r\\n    // Variables para llevar el control de las reservas de liquidez para TokenA y TokenB\\r\\n    uint256 public reserveA;\\r\\n    uint256 public reserveB;\\r\\n\\r\\n    // Declaraci\\u00f3n de eventos para notificar acciones clave en el contrato.\\r\\n    event LiquidityAdded(address indexed user, uint256 amountA, uint256 amountB);\\r\\n    event LiquidityRemoved(address indexed user, uint256 amountA, uint256 amountB);\\r\\n    event TokenSwapped(address indexed user, uint256 amountIn, uint256 amountOut, bool isAtoB);\\r\\n\\r\\n    // Constructor: Pasa msg.sender al constructor de Ownable\\r\\n    constructor(address _tokenA, address _tokenB) Ownable(msg.sender) {\\r\\n        tokenA = IERC20(_tokenA);\\r\\n        tokenB = IERC20(_tokenB);\\r\\n    }\\r\\n\\r\\n    // Funci\\u00f3n para a\\u00f1adir liquidez al pool\\r\\n    function addLiquidity(uint256 amountA, uint256 amountB) external onlyOwner {\\r\\n        require(amountA > 0 && amountB > 0, \\\"Amount must be greater than zero\\\");\\r\\n\\r\\n        // Transferir tokens al contrato\\r\\n        tokenA.transferFrom(msg.sender, address(this), amountA);\\r\\n        tokenB.transferFrom(msg.sender, address(this), amountB);\\r\\n\\r\\n        // Actualizar las reservas\\r\\n        reserveA += amountA;\\r\\n        reserveB += amountB;\\r\\n\\r\\n        // Emisi\\u00f3n del evento de adici\\u00f3n de liquidez.\\r\\n        emit LiquidityAdded(msg.sender, amountA, amountB);\\r\\n    }\\r\\n\\r\\n    // Funci\\u00f3n para retirar liquidez del pool\\r\\n    function removeLiquidity(uint256 amountA, uint256 amountB) external onlyOwner {\\r\\n        require(amountA <= reserveA && amountB <= reserveB, \\\"Not enough liquidity\\\");\\r\\n\\r\\n        // Transferir tokens al owner\\r\\n        tokenA.transfer(msg.sender, amountA);\\r\\n        tokenB.transfer(msg.sender, amountB);\\r\\n\\r\\n        // Actualizar las reservas\\r\\n        reserveA -= amountA;\\r\\n        reserveB -= amountB;\\r\\n\\r\\n        // Emisi\\u00f3n del evento de retiro de liquidez.\\r\\n        emit LiquidityRemoved(msg.sender, amountA, amountB);\\r\\n    }\\r\\n\\r\\n    // Funci\\u00f3n para intercambiar TokenA por TokenB\\r\\n    function swapAforB(uint256 amountAIn) external {\\r\\n        require(amountAIn > 0, \\\"Amount must be greater than zero\\\");\\r\\n        \\r\\n        // Verificar que el usuario tiene suficientes TokenA\\r\\n        require(tokenA.balanceOf(msg.sender) >= amountAIn, \\\"Insufficient TokenA balance\\\");\\r\\n\\r\\n        // Calcular la cantidad de TokenB que recibir\\u00e1 el usuario.\\r\\n        uint256 amountBOut = getAmountOut(amountAIn, reserveA, reserveB);\\r\\n        require(amountBOut > 0, \\\"Insufficient liquidity\\\");\\r\\n\\r\\n        // Transferir TokenA al contrato\\r\\n        tokenA.transferFrom(msg.sender, address(this), amountAIn);\\r\\n        // Transferir TokenB al usuario\\r\\n        tokenB.transfer(msg.sender, amountBOut);\\r\\n\\r\\n        // Actualizar las reservas\\r\\n        reserveA += amountAIn;\\r\\n        reserveB -= amountBOut;\\r\\n\\r\\n        // Emisi\\u00f3n del evento de intercambio.\\r\\n        emit TokenSwapped(msg.sender, amountAIn, amountBOut, true);\\r\\n    }\\r\\n\\r\\n\\r\\n    // Funci\\u00f3n para intercambiar TokenB por TokenA\\r\\n    function swapBforA(uint256 amountBIn) external {\\r\\n        require(amountBIn > 0, \\\"Amount must be greater than zero\\\");\\r\\n        \\r\\n        // Verificar que el usuario tiene suficientes TokenB\\r\\n        require(tokenB.balanceOf(msg.sender) >= amountBIn, \\\"Insufficient TokenB balance\\\");\\r\\n\\r\\n        // Calcula la cantidad de TokenA que recibir\\u00e1 el usuario bas\\u00e1ndose en las reservas actuales\\r\\n        uint256 amountAOut = getAmountOut(amountBIn, reserveB, reserveA);\\r\\n        require(amountAOut > 0, \\\"Insufficient liquidity\\\");\\r\\n\\r\\n        // Transferir TokenB al contrato\\r\\n        tokenB.transferFrom(msg.sender, address(this), amountBIn);\\r\\n        // Transferir TokenA al usuario\\r\\n        tokenA.transfer(msg.sender, amountAOut);\\r\\n\\r\\n        // Actualizar las reservas\\r\\n        reserveB += amountBIn;\\r\\n        reserveA -= amountAOut;\\r\\n\\r\\n        // Emitir un evento que notifica que el intercambio se realiz\\u00f3\\r\\n        emit TokenSwapped(msg.sender, amountBIn, amountAOut, false);   \\r\\n    }\\r\\n\\r\\n\\r\\n    // Funci\\u00f3n para calcular el precio de intercambio basado en las reservas\\r\\n    function getPrice(address _token) public view returns (uint256) {\\r\\n        require(_token == address(tokenA) || _token == address(tokenB), \\\"Invalid token address\\\");\\r\\n\\r\\n        uint256 price; // Variable para almacenar el precio calculado\\r\\n\\r\\n        if (_token == address(tokenA)) {\\r\\n            // Si el token es TokenA, calculo el precio de TokenA en t\\u00e9rminos de TokenB\\r\\n            price = reserveB * 10 ** 18 / reserveA;\\r\\n        } else {\\r\\n            // Si el token es TokenB, calculo el precio de TokenB en t\\u00e9rminos de TokenA\\r\\n            price = reserveA * 10 ** 18 / reserveB;\\r\\n        }\\r\\n\\r\\n        return price; // Devuelve el precio calculado\\r\\n    }\\r\\n\\r\\n\\r\\n    // Funci\\u00f3n para calcular la cantidad de tokens que se recibir\\u00e1n en un intercambio\\r\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) public pure returns (uint256) {\\r\\n        require(amountIn > 0, \\\"Amount must be greater than zero\\\");\\r\\n        \\r\\n        return (amountIn * reserveOut) / (reserveIn + amountIn);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2134f7f4616051a267a3a706bbc7d7475ce71c53cc911b6a6ca942c720b793fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610f5c380380610f5c83398101604081905261002f916100fc565b338061005557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005e81610090565b50600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905561012f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100f757600080fd5b919050565b6000806040838503121561010f57600080fd5b610118836100e0565b9150610126602084016100e0565b90509250929050565b610e1e8061013e6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638014a7aa1161008c5780639d7de6b3116100665780639d7de6b314610195578063dc5fa6c5146101a8578063e4f1f70a146101b1578063f2fde38b146101c457600080fd5b80638014a7aa1461015e5780638da5cb5b146101715780639cd441da1461018257600080fd5b8063054d50d4146100d45780630fc63d10146100fa57806319e36f3b1461012557806341976e091461012e5780635f64b55b14610141578063715018a614610154575b600080fd5b6100e76100e2366004610c48565b6101d7565b6040519081526020015b60405180910390f35b60015461010d906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b6100e760045481565b6100e761013c366004610c74565b610227565b60025461010d906001600160a01b031681565b61015c610304565b005b61015c61016c366004610ca4565b610318565b6000546001600160a01b031661010d565b61015c610190366004610cbd565b6105b7565b61015c6101a3366004610cbd565b610743565b6100e760035481565b61015c6101bf366004610ca4565b6108f6565b61015c6101d2366004610c74565b610b8d565b60008084116102015760405162461bcd60e51b81526004016101f890610cdf565b60405180910390fd5b61020b8484610d2a565b6102158386610d3d565b61021f9190610d54565b949350505050565b6001546000906001600160a01b038381169116148061025357506002546001600160a01b038381169116145b6102975760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b60448201526064016101f8565b6001546000906001600160a01b03908116908416036102d9576003546004546102c890670de0b6b3a7640000610d3d565b6102d29190610d54565b90506102fe565b6004546003546102f190670de0b6b3a7640000610d3d565b6102fb9190610d54565b90505b92915050565b61030c610bcb565b6103166000610bf8565b565b600081116103385760405162461bcd60e51b81526004016101f890610cdf565b6002546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a49190610d76565b10156103f25760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420546f6b656e422062616c616e6365000000000060448201526064016101f8565b6000610403826004546003546101d7565b90506000811161044e5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b60448201526064016101f8565b6002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061048290339030908790600401610d8f565b6020604051808303816000875af11580156104a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c59190610db3565b5060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053b9190610db3565b50816004600082825461054e9190610d2a565b9250508190555080600360008282546105679190610dd5565b9091555050604080518381526020810183905260009181019190915233907f998db19d1e1862382f8a2644e3c399121b4ec6dcae1a42dd4034c30fca3fe32b906060015b60405180910390a25050565b6105bf610bcb565b6000821180156105cf5750600081115b6105eb5760405162461bcd60e51b81526004016101f890610cdf565b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061061f90339030908790600401610d8f565b6020604051808303816000875af115801561063e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106629190610db3565b506002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061069790339030908690600401610d8f565b6020604051808303816000875af11580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190610db3565b5081600360008282546106ed9190610d2a565b9250508190555080600460008282546107069190610d2a565b9091555050604080518381526020810183905233917fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee4591016105ab565b61074b610bcb565b600354821115801561075f57506004548111155b6107a25760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f756768206c697175696469747960601b60448201526064016101f8565b60015460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156107f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108179190610db3565b5060025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088d9190610db3565b5081600360008282546108a09190610dd5565b9250508190555080600460008282546108b99190610dd5565b9091555050604080518381526020810183905233917f96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd05991016105ab565b600081116109165760405162461bcd60e51b81526004016101f890610cdf565b6001546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa15801561095e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109829190610d76565b10156109d05760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420546f6b656e412062616c616e6365000000000060448201526064016101f8565b60006109e1826003546004546101d7565b905060008111610a2c5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b60448201526064016101f8565b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610a6090339030908790600401610d8f565b6020604051808303816000875af1158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa39190610db3565b5060025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b199190610db3565b508160036000828254610b2c9190610d2a565b925050819055508060046000828254610b459190610dd5565b9091555050604080518381526020810183905260019181019190915233907f998db19d1e1862382f8a2644e3c399121b4ec6dcae1a42dd4034c30fca3fe32b906060016105ab565b610b95610bcb565b6001600160a01b038116610bbf57604051631e4fbdf760e01b8152600060048201526024016101f8565b610bc881610bf8565b50565b6000546001600160a01b031633146103165760405163118cdaa760e01b81523360048201526024016101f8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060608486031215610c5d57600080fd5b505081359360208301359350604090920135919050565b600060208284031215610c8657600080fd5b81356001600160a01b0381168114610c9d57600080fd5b9392505050565b600060208284031215610cb657600080fd5b5035919050565b60008060408385031215610cd057600080fd5b50508035926020909101359150565b6020808252818101527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156102fe576102fe610d14565b80820281158282048414176102fe576102fe610d14565b600082610d7157634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610d8857600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610dc557600080fd5b81518015158114610c9d57600080fd5b818103818111156102fe576102fe610d1456fea26469706673582212208df00ae9949874be050152eb77bee2f140b3037633e90c223a78cf5858946ae064736f6c634300081a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638014a7aa1161008c5780639d7de6b3116100665780639d7de6b314610195578063dc5fa6c5146101a8578063e4f1f70a146101b1578063f2fde38b146101c457600080fd5b80638014a7aa1461015e5780638da5cb5b146101715780639cd441da1461018257600080fd5b8063054d50d4146100d45780630fc63d10146100fa57806319e36f3b1461012557806341976e091461012e5780635f64b55b14610141578063715018a614610154575b600080fd5b6100e76100e2366004610c48565b6101d7565b6040519081526020015b60405180910390f35b60015461010d906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b6100e760045481565b6100e761013c366004610c74565b610227565b60025461010d906001600160a01b031681565b61015c610304565b005b61015c61016c366004610ca4565b610318565b6000546001600160a01b031661010d565b61015c610190366004610cbd565b6105b7565b61015c6101a3366004610cbd565b610743565b6100e760035481565b61015c6101bf366004610ca4565b6108f6565b61015c6101d2366004610c74565b610b8d565b60008084116102015760405162461bcd60e51b81526004016101f890610cdf565b60405180910390fd5b61020b8484610d2a565b6102158386610d3d565b61021f9190610d54565b949350505050565b6001546000906001600160a01b038381169116148061025357506002546001600160a01b038381169116145b6102975760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b60448201526064016101f8565b6001546000906001600160a01b03908116908416036102d9576003546004546102c890670de0b6b3a7640000610d3d565b6102d29190610d54565b90506102fe565b6004546003546102f190670de0b6b3a7640000610d3d565b6102fb9190610d54565b90505b92915050565b61030c610bcb565b6103166000610bf8565b565b600081116103385760405162461bcd60e51b81526004016101f890610cdf565b6002546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a49190610d76565b10156103f25760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420546f6b656e422062616c616e6365000000000060448201526064016101f8565b6000610403826004546003546101d7565b90506000811161044e5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b60448201526064016101f8565b6002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061048290339030908790600401610d8f565b6020604051808303816000875af11580156104a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c59190610db3565b5060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053b9190610db3565b50816004600082825461054e9190610d2a565b9250508190555080600360008282546105679190610dd5565b9091555050604080518381526020810183905260009181019190915233907f998db19d1e1862382f8a2644e3c399121b4ec6dcae1a42dd4034c30fca3fe32b906060015b60405180910390a25050565b6105bf610bcb565b6000821180156105cf5750600081115b6105eb5760405162461bcd60e51b81526004016101f890610cdf565b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061061f90339030908790600401610d8f565b6020604051808303816000875af115801561063e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106629190610db3565b506002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061069790339030908690600401610d8f565b6020604051808303816000875af11580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190610db3565b5081600360008282546106ed9190610d2a565b9250508190555080600460008282546107069190610d2a565b9091555050604080518381526020810183905233917fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee4591016105ab565b61074b610bcb565b600354821115801561075f57506004548111155b6107a25760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f756768206c697175696469747960601b60448201526064016101f8565b60015460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156107f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108179190610db3565b5060025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088d9190610db3565b5081600360008282546108a09190610dd5565b9250508190555080600460008282546108b99190610dd5565b9091555050604080518381526020810183905233917f96cd817c6329656790ef8fba7675405193677d39619571282f5e21f3a98cd05991016105ab565b600081116109165760405162461bcd60e51b81526004016101f890610cdf565b6001546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa15801561095e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109829190610d76565b10156109d05760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420546f6b656e412062616c616e6365000000000060448201526064016101f8565b60006109e1826003546004546101d7565b905060008111610a2c5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b60448201526064016101f8565b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610a6090339030908790600401610d8f565b6020604051808303816000875af1158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa39190610db3565b5060025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b199190610db3565b508160036000828254610b2c9190610d2a565b925050819055508060046000828254610b459190610dd5565b9091555050604080518381526020810183905260019181019190915233907f998db19d1e1862382f8a2644e3c399121b4ec6dcae1a42dd4034c30fca3fe32b906060016105ab565b610b95610bcb565b6001600160a01b038116610bbf57604051631e4fbdf760e01b8152600060048201526024016101f8565b610bc881610bf8565b50565b6000546001600160a01b031633146103165760405163118cdaa760e01b81523360048201526024016101f8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060608486031215610c5d57600080fd5b505081359360208301359350604090920135919050565b600060208284031215610c8657600080fd5b81356001600160a01b0381168114610c9d57600080fd5b9392505050565b600060208284031215610cb657600080fd5b5035919050565b60008060408385031215610cd057600080fd5b50508035926020909101359150565b6020808252818101527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156102fe576102fe610d14565b80820281158282048414176102fe576102fe610d14565b600082610d7157634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610d8857600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610dc557600080fd5b81518015158114610c9d57600080fd5b818103818111156102fe576102fe610d1456fea26469706673582212208df00ae9949874be050152eb77bee2f140b3037633e90c223a78cf5858946ae064736f6c634300081a0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 942,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "tokenA",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)877"
      },
      {
        "astId": 945,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "tokenB",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)877"
      },
      {
        "astId": 947,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "reserveA",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 949,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "reserveB",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)877": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}